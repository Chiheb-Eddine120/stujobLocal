# Fichiers de maintenance du site

## Services principaux
- src/services/settingsService.ts : Services de maintenance et gestion du mode maintenance
- src/services/settings.ts : Fonctions de gestion des param√®tres du site
- src/services/supabase.ts : Configuration Supabase
- src/services/supabaseClient.ts : Client Supabase pour la base de donn√©es

## Composants React
- src/components/MaintenanceMode.tsx : Page de maintenance
- src/components/MaintenanceToggle.tsx : Basculement du mode maintenance
- src/pages/MaintenanceMode.tsx : Page de maintenance

## Hooks React
- src/hooks/useMaintenance.ts : Hook de gestion de l'√©tat de maintenance

## Migrations SQL
- supabase/migrations/20240000000000_create_settings_table.sql : Cr√©ation table des param√®tres
- supabase/migrations/20240000000001_add_change_history.sql : Ajout historique des changements
- supabase/migrations/20240000000002_fix_settings_table.sql : Correction table des param√®tres  
- supabase/migrations/20240000000003_fix_trigger.sql : Correction trigger

## Fichiers SQL
- src/sql/settings.sql : Requ√™tes SQL param√®tres
- src/sql/create_notifications_table.sql : Cr√©ation table notifications
- src/database/schema.sql : Sch√©ma base de donn√©es

## Types TypeScript
- src/types/supabase.ts : Types Supabase
- src/types/index.ts : Types de l'application

## Autres services
- src/services/statisticsService.ts : Services statistiques
- src/services/profileService.ts : Services profils utilisateurs
- src/services/notificationService.ts : Services notifications
- src/services/matchService.ts : Services matchs √©tudiants/entreprises
- src/services/etudiantService.ts : Services √©tudiants
- src/services/demandeService.ts : Services demandes de recrutement
- src/services/authService.ts : Services authentification
- src/services/emailService.ts : Services emails

## Utilitaires
- src/lib/supabase.ts : Fonctions utilitaires Supabase

## Fichiers principaux
- src/App.tsx : Composant principal
- src/main.tsx : Point d'entr√©e
- src/index.tsx : Point d'entr√©e
- src/index.css : Styles CSS
- src/vite-env.d.ts : Types Vite

## Configuration
- vite.config.ts : Configuration Vite
- tsconfig.json : Configuration TypeScript
- tsconfig.node.json : Configuration TypeScript Node
- package.json : D√©pendances et scripts
- netlify.toml : Configuration Netlify
- README.md : Documentation
- .env : Variables d'environnement
- .gitignore : Fichiers ignor√©s
- index.html : Template HTML

## Dossiers
- public/ : Fichiers statiques
- node_modules/ : D√©pendances
- dist/ : Fichiers de production
- .git/ : Fichiers Git
- supabase/functions/send-email/ : Fonctions emails Supabase
- supabase/functions/ : Fonctions Supabase
- supabase/migrations/ : Migrations SQL
- supabase/ : Configuration Supabase
- src/ : Code source
- src/components/ : Composants React
- src/pages/ : Pages React
- src/services/ : Services
- src/hooks/ : Hooks React
- src/types/ : Types TypeScript
- src/sql/ : Requ√™tes SQL
- src/database/ : Base de donn√©es
- src/scripts/ : Scripts
- src/lib/ : Biblioth√®ques

## Pages React
- src/pages/DashboardSettings.tsx : Param√®tres tableau de bord
- src/pages/DashboardStats.tsx : Statistiques tableau de bord
- src/pages/DashboardUsers.tsx : Utilisateurs tableau de bord
- src/pages/DashboardNotifications.tsx : Notifications tableau de bord
- src/pages/DashboardMenu.tsx : Menu tableau de bord
- src/pages/DashboardMatch.tsx : Matchs tableau de bord
- src/pages/Home.tsx : Accueil
- src/pages/Etudiants.tsx : Liste √©tudiants
- src/pages/EspaceEtudiant.tsx : Espace √©tudiant
- src/pages/DemandeForm.tsx : Formulaire demande
- src/pages/Contact.tsx : Contact
- src/pages/Login.tsx : Connexion
- src/pages/Register.tsx : Inscription
- src/pages/Unauthorized.tsx : Acc√®s non autoris√©
- src/pages/About.tsx : √Ä propos
- src/pages/Privacy.tsx : Confidentialit√©
- src/pages/SuiviDemande.tsx : Suivi demande
- src/pages/brouillon.tsx : BrouillonParfait, je vais te pr√©parer √ßa **proprement**, clair pour ton IA **et** pour toi !

Je vais t‚Äô√©crire :
- 1. Un **nouveau `useMaintenance.ts`** robuste.
- 2. Une **protection globale** dans `App.tsx`.
- 3. Des **commentaires explicites** pour guider ton IA **et** tout d√©veloppeur qui reprendra ton code.

---

## 1. Nouveau `src/hooks/useMaintenance.ts`
```tsx
import { useEffect, useState } from 'react';
import { getMaintenanceStatus } from '../services/settings';

/**
 * Hook personnalis√© pour r√©cup√©rer l'√©tat de maintenance du site.
 * Appelle la base de donn√©es pour savoir si la maintenance est active.
 */
export function useMaintenance() {
  const [isMaintenance, setIsMaintenance] = useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    // Fonction interne pour r√©cup√©rer l'√©tat de maintenance
    async function fetchMaintenanceStatus() {
      try {
        const status = await getMaintenanceStatus(); // Doit retourner true ou false
        setIsMaintenance(status);
      } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration du statut de maintenance:', error);
      } finally {
        setLoading(false);
      }
    }

    fetchMaintenanceStatus();

    // OPTIONNEL : si besoin d'actualiser en temps r√©el toutes les X minutes :
    // const interval = setInterval(fetchMaintenanceStatus, 30000); // toutes les 30 sec
    // return () => clearInterval(interval);
  }, []);

  return { isMaintenance, loading };
}
```

---

## 2. `src/App.tsx` (modification principale)
Dans ton `App.tsx`, **avant d'afficher les routes**, ajoute une v√©rification **globale** :

```tsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { useMaintenance } from './hooks/useMaintenance';
import MaintenanceMode from './pages/MaintenanceMode';
import { useAuth } from './hooks/useAuth'; // Suppos√© que tu as un hook d'authentification

function App() {
  const { isMaintenance, loading } = useMaintenance();
  const { user } = useAuth(); // utilisateur actuel connect√©

  // Pendant le chargement du statut, tu peux afficher un loader
  if (loading) {
    return <div>Chargement...</div>;
  }

  // Si le site est en maintenance et que l'utilisateur n'est pas admin ‚ûî redirection vers la page Maintenance
  if (isMaintenance && (!user || !user.isAdmin)) {
    return <MaintenanceMode />;
  }

  return (
    <Router>
      <Routes>
        {/* Tes routes normales ici */}
      </Routes>
    </Router>
  );
}

export default App;
```

---

## 3. R√©sum√© pour ton IA ou autre d√©veloppeur
### üí¨ R√©sum√© expliquant **o√π** et **quoi v√©rifier** :

- **`src/hooks/useMaintenance.ts`** : 
  - R√©cup√®re l‚Äô√©tat du mode maintenance depuis la base de donn√©es.
  - S'assure que le statut est toujours √† jour.

- **`src/App.tsx`** :
  - Pendant que l‚Äô√©tat est en cours de chargement, le site affiche "Chargement...".
  - Une fois l‚Äô√©tat r√©cup√©r√© :
    - Si le site est en maintenance **et** que l'utilisateur n'est **pas admin**, ‚ûî affiche `MaintenanceMode`.
    - Sinon, continue d'afficher les routes normales.
    
- **Point critique pour corriger le probl√®me actuel** :
  - Il faut s'assurer que la fonction `getMaintenanceStatus()` dans `services/settings.ts` retourne correctement un `boolean`.
  - Il faut v√©rifier que le hook `useAuth()` retourne bien le r√¥le ou la propri√©t√© `isAdmin` du user connect√©.

---

## üõ† Check-list rapide pour ton IA (ou toi) :

| V√©rification √† faire | Endroit concern√© | Priorit√© |
|:---|:---|:---|
| `getMaintenanceStatus()` retourne bien `true` ou `false` | `src/services/settings.ts` | Haute |
| `useMaintenance()` r√©cup√®re correctement l'√©tat | `src/hooks/useMaintenance.ts` | Haute |
| `App.tsx` v√©rifie `isMaintenance` et `user.isAdmin` | `src/App.tsx` | Tr√®s haute |
| L‚Äôutilisateur connect√© a bien un champ `isAdmin` | `src/hooks/useAuth.ts` (ou √©quivalent) | Haute |

---

Veux-tu aussi que je t‚Äô√©crive :
- un exemple de ce que `getMaintenanceStatus()` devrait ressembler dans `services/settings.ts` ?
- ou un exemple de `ProtectedRoute.tsx` corrig√© pour bien suivre la m√™me logique ?

√áa prendrait 2 minutes de plus si tu veux tout stabiliser d‚Äôun coup üî•.  
Veux-tu ? üöÄ

## Composants React
- src/components/StudentProfileView.tsx : Vue profil √©tudiant
- src/components/StudentProfileForm.tsx : Formulaire profil √©tudiant
- src/components/ProtectedRoute.tsx : Route prot√©g√©e
- src/components/Navbar.tsx : Barre navigation
- src/components/Footer.tsx : Pied de page
- src/components/FAQ.tsx : FAQ
- src/components/DashboardBackButton.tsx : Bouton retour tableau de bord
- src/components/CookieConsent.tsx : Consentement cookies
- src/components/Testimonials.tsx : T√©moignages
- src/components/Stats.tsx : Statistiques